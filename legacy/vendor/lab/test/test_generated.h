// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TEST_H_
#define FLATBUFFERS_GENERATED_TEST_H_

#include "flatbuffers/flatbuffers.h"

struct TestPacket;

struct TestPacket FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ANSWER = 4,
    VT_PI = 6
  };
  int32_t answer() const {
    return GetField<int32_t>(VT_ANSWER, 0);
  }
  float pi() const {
    return GetField<float>(VT_PI, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ANSWER) &&
           VerifyField<float>(verifier, VT_PI) &&
           verifier.EndTable();
  }
};

struct TestPacketBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_answer(int32_t answer) {
    fbb_.AddElement<int32_t>(TestPacket::VT_ANSWER, answer, 0);
  }
  void add_pi(float pi) {
    fbb_.AddElement<float>(TestPacket::VT_PI, pi, 0.0f);
  }
  TestPacketBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TestPacketBuilder &operator=(const TestPacketBuilder &);
  flatbuffers::Offset<TestPacket> Finish() {
    const auto end = fbb_.EndTable(start_, 2);
    auto o = flatbuffers::Offset<TestPacket>(end);
    return o;
  }
};

inline flatbuffers::Offset<TestPacket> CreateTestPacket(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t answer = 0,
    float pi = 0.0f) {
  TestPacketBuilder builder_(_fbb);
  builder_.add_pi(pi);
  builder_.add_answer(answer);
  return builder_.Finish();
}

inline const TestPacket *GetTestPacket(const void *buf) {
  return flatbuffers::GetRoot<TestPacket>(buf);
}

inline bool VerifyTestPacketBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<TestPacket>(nullptr);
}

inline void FinishTestPacketBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<TestPacket> root) {
  fbb.Finish(root);
}

#endif  // FLATBUFFERS_GENERATED_TEST_H_
