
/*
 *  capsule - the game recording and overlay toolkit
 *  Copyright (C) 2017, Amos Wenger
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details:
 * https://github.com/itchio/capsule/blob/master/LICENSE
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA
 */

namespace capsule.messages;

enum PixFmt:int {
    UNKNOWN,
    RGBA,     // R8,  G8,  B8,  A8
    BGRA,     // B8,  G8,  R8,  A8
    RGB10_A2, // R10, G10, B10, A2
    YUV444P,  // planar Y4 U4 B4
}

enum SampleFmt:int {
    UNKNOWN,
    F32LE,   // 32-bit float, little-endian
}

union Message {
    HotkeyPressed,
    CaptureStart,
    CaptureStop,
    VideoSetup,
    VideoFrameCommitted,
    VideoFrameProcessed,
    AudioFramesCommitted,
    AudioFramesProcessed,
}

table Packet {
    message: Message;
}

table HotkeyPressed {}

table CaptureStart {
    fps: uint;
    size_divider: uint;
    gpu_color_conv: bool;
}
table CaptureStop {}

table VideoSetup {
    width: uint;
    height: uint;
    pix_fmt: PixFmt;
    vflip: bool;
    offset: [long];
    linesize: [long];
    shmem: Shmem;
    audio: AudioSetup;
}

table AudioSetup {
    channels: uint;
    format: SampleFmt;
    rate: uint;
    shmem: Shmem;
}

table Shmem {
    path: string;
    size: ulong;
}

table AudioFramesCommitted {
    offset: uint;
    frames: uint;
}

table AudioFramesProcessed {
    offset: uint;
    frames: uint;
}

table VideoFrameCommitted {
    timestamp: ulong;
    index: uint;
}

table VideoFrameProcessed {
    index: uint;
}

root_type Packet;
